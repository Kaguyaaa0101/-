//高精度乘法实际上和高精度加法差不多
//就是模拟小学生都会的竖式计算
//对于特别大的数据，可以像竖式一样一位一位算
//把每一位都存入数组的话就不必担心数据过大了（应该吧QAQ 
#include <bits/stdc++.h>//c++的万能头文件 
using namespace std;//c++得写命名空间语句
int a[5010], b[5010], c[5010];//a,b数组开int足矣，用来存两个乘数的每一位
//c数组开出来存积的每位 
char A[5010], B[5010];//这两个字符数组用来存两个乘数的每一位（输入用 
int zero = 0;//这个没必要，但是我不会用printf打0，所以搞了个变量存0这个值，因为0*0要特判（ 
int main(){//定义主函数（不解释 
	scanf("%s %s", &A, &B);//输入两个乘数 
	int la = strlen(A); int lb = strlen(B);//定义两个变量存a,b的位数 
	for (int i = la - 1; i >= 0; i--) a[la - i] = A[i] - '0';//把a,b从字符转到数组里 
	for (int i = lb - 1; i >= 0; i--) b[lb - i] = B[i] - '0';//这里是一个逆序遍历
	//可以发现a,b被反向存进数组了，因为输入时候先输大的位数，这样存可保证个位在数组第零位 
	for (int i = 1; i <= la; i++)//循环算每位的结果 
		for (int j = 1; j <= lb; j++)//嵌套一个作用同上 
			c[i + j - 1] += a[i] * b[j];
			//这句是重点我觉得，你算一算会发现：a,b的两位计算时的值的位数是这两位位数相加 
	int l = la + lb;//后面要用到总位数，推导方法同上句 
	for (int i = 1; i <= l; i++){
		c[i + 1] += c[i] / 10;//处理进位 
		c[i] %= 10;//处理进位 
	}
	while (!c[l] && l >= 1)//这个循环用于去除前导零，我自己用for写的，但是看起来会很难懂且奇怪 
		l--;
	if (l == 0) printf("%d", zero);//零乘零要特判 
	else{
		for (int i = l; i > 0; i--) printf("%d", c[i]);//因为个位存在数组零位上，所以逆序输出 
	}
	return 0;//返回0表示程序正常结束，这个你肯定懂 
}
//有不会的再微信我吧！ 
